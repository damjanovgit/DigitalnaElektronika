library ieee;
use ieee.std_logic_1164.all;

entity DekadniBrojac is
port(
    clk : in std_logic; 
    reset : in std_logic; 
    up : in std_logic; 
    output : out std_logic_vector(3 downto 0)
);
end entity DekadniBrojac;

architecture Behavioral of DekadniBrojac is
    type bcd_state is (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9);
    signal pr_state, nx_state : bcd_state;
    
begin

    process(clk, reset)
    begin
    
    if rising_edge(clk) then
        if (reset = '1' and up = '1') then
            pr_state <= s0;
        elsif (reset = '1' and up = '0') then
            pr_state <= s9;
        else
            pr_state <= nx_state;
        end if;  
    end if;
    end process;

    process(pr_state)
    begin
        case pr_state is
        when s0 =>
        
            if (up = '1') then
                nx_state <= s1;
            else
                nx_state <= s9;
            end if;
            output <= "0000";
        when s1 =>
            if (up = '1') then
                nx_state <= s2;
            else
                nx_state <= s0;
            end if;
            output <= "0001";
         when s2 =>
            if (up = '1') then
                nx_state <= s3;
            else
                nx_state <= s1;
            end if;
            output <= "0010";
        when s3 =>
            if (up = '1') then
                nx_state <= s4;
            else
                nx_state <= s2;
            end if;
            output <= "0011";
        when s4 =>
            if (up = '1') then
                nx_state <= s5;
            else
                nx_state <= s3;
            end if;
            output <= "0100";
        when s5 =>
            if (up = '1') then
                nx_state <= s6;
            else
                nx_state <= s4;
            end if;
            output <= "0101";
        when s6 =>
            if (up = '1') then
                nx_state <= s7;
            else
                nx_state <= s5;
            end if;
            output <= "0110";
        when s7 =>
            if (up = '1') then
                nx_state <= s8;
            else
                nx_state <= s6;
            end if;
            output <= "0111";
        when s8 =>
            if (up = '1') then
                nx_state <= s9;
            else
                nx_state <= s7;
            end if;
            output <= "1000";
        when s9 =>
            if (up = '1') then
                nx_state <= s0;
            else
                nx_state <= s8;
            end if;
            output <= "1001";
        end case;
    end process;
end architecture Behavioral;
        